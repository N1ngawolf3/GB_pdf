from random import randint

#Easy
# Задача-1:
# Дан список фруктов.
# Напишите программу, выводящую фрукты в виде нумерованного списка,
# выровненного по правой стороне.
# Пример:
# Дано: ["яблоко", "банан", "киви", "арбуз"]
# Вывод:
# 1. яблоко
# 2. банан
# 3. киви
# 4. арбуз
# Подсказка: воспользоваться методом .format()

def Easy_first_task():
    my_list = ['яблоко', 'банан', 'киви','арбуз']
    i = 1
    for fruit in my_list:
        print(f'{i}.','{}'.format(fruit,'>'))
        i+=1


# Задача-2:
# Даны два произвольные списка.
# Удалите из первого списка элементы, присутствующие во втором списке.

def Easy_second_task():
    my_list1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    my_list2 = [0, 2, 4, 6, 8]
    for number in my_list2:
        if number in my_list1:
            my_list1.remove(number)
    print(*my_list1)


# Задача-3:
# Дан произвольный список из целых чисел.
# Получите НОВЫЙ список из элементов исходного, выполнив следующие условия:
# если элемент кратен двум, то разделить его на 4, если не кратен, то умножить на два.

def Easy_third_task():
    my_list = [i for i in range(15)]
    new_list = []
    for number in my_list:
        if number % 2 == 0:
            new_list.append(number/4)
        else:
            new_list.append(number*2)
    print(*my_list)
    print(*new_list)


#Normal
# Задача-1:
# Дан список, заполненный произвольными целыми числами, получите новый список,
# элементами которого будут квадратные корни элементов исходного списка,
# но только если результаты извлечения корня не имеют десятичной части и
# если такой корень вообще можно извлечь
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4] Результат: [3, 5, 2]

def Normal_first_task():
    my_list = [2, -5, 8, 9, -25, 25, 4]
    sqr_root = []
    for number in my_list:
        root = number**(1/2)
        if (number>0) and (number % root == 0):
            sqr_root.append(int(root))
    print(*sqr_root)

# Задача-2: Дана дата в формате dd.mm.yyyy, например: 02.11.2013.
# Ваша задача вывести дату в текстовом виде, например: второе ноября 2013 года.
# Склонением пренебречь (2000 года, 2010 года)

def Normal_second_task():
    days =   {'01':'первое','02':'второе','03':'третье',
              '04':'четвёртое','05':'пятое','06':'шестое',
              '07':'седьмое','08':'восьмое','09':'девятое',
              '10':'десятое','11':'одиннадцатое','12':'двеннадцатое',
              '13':'тринадцатое','14':'четырнадцатое','15':'пятнадцатое',
              '16':'шестнадцатое','17':'семнадцатое','18':'восемнадцатое',
              '19':'девятнадцатое','20':'двадцатое','30':'тридцатое',
              '31':'тридцать первое'}
    months = {'01':'января','02':'февраля','03':'марта',
              '04':'апреля','05':'мая','06':'июня',
              '07':'июля','08':'августа','09':'сентября',
              '10':'октября','11':'ноября','12':'декабря'}

    date = input('Введите дату в формате dd.mm.yyyy: ')
    try:
        day = days[f'{date[0:2]}']
    except:
        day = 'двадцать ' + days[f'0{date[1:2]}']
    month = months[f'{date[3:5]}']
    year = date[-4:]
    print(day,month,year,'года')


# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами
# в диапазоне от -100 до 100. В списке должно быть n - элементов.
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random

def Normal_third_task(n):
    my_list = [randint(-100,100) for _ in range(n)]
    print(*my_list)

# Задача-4: Дан список, заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут:
# а) неповторяющиеся элементы исходного списка:
# например, lst = [1, 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 2, 4, 5, 6]
# б) элементы исходного списка, которые не имеют повторений:
# например, lst = [1 , 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 4, 6]

def Normal_fourth_task():
    lst = [1, 2, 4, 5, 6, 2, 5, 2]
    lst2 = list(set(lst))
    lst3 = []
    for el in lst:
        count = 0
        for i in range(7):
            if lst[i] == el:
                count+=1
        if count == 1: lst3.append(el)
    print(*lst3)

#Hard
# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.
#equation = 'y = -12x + 11111140.2121'
#x = 2.5
# вычислите и выведите y

def Hard_first_task():
    equation = input('Введите выражение: ')
    x = float(input('Введите x: '))
    EQlist = equation.split(' ')
    k = float(EQlist[2][:EQlist[2].find('x')])
    b = float(EQlist[len(EQlist)-1])
    y = k*x + b
    print(y)


# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
# (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом
# (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)
# Пример корректной даты
#date = '01.11.1985'
# Примеры некорректных дат
#date = '01.22.1001'
#date = '1.12.1001'
#date = '-2.10.3001'

def Hard_second_task():
    date = input('Введите дату: ')
    date = date.split('.')
    day = date[0]
    month = date[1]
    year = date[2]
    if len(day) != 2:
        print('Формат дня 01...31')
    elif len(month) != 2:
        print('Формат месяца 01...12')
    elif len(year) != 4:
        print('Формат года 0001...9999')
    elif (int(day) < 0) | (int(day) > 32):
        print('День должен быть в диапазоне [1...31]')
    elif (int(month) < 0) | (int(month) > 12):
        print('Месяц должен быть в диапазоне [1...12]')
    elif (int(year) < 0) | (int(year) > 9999):
        print('Год должен быть в диапазоне [1...9999]')


# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
# ...
# 12 13 14
# 9 10 11
# 6 7 8
# 4 5
# 2 3
# 1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
# Выходные данные: Два целых числа — номер этажа и порядковый номер слева на этаже.
# Пример:
# Вход: 13
# Выход: 6 2
# Вход: 11
# Выход: 5 3

def Hard_third_task():
    room = int(input('Введите номер комнаты: '))
    rooms = [x+1 for x in range(room)]
    tower = []
    x = 1
    for el in rooms:
        pass



if __name__ == '__main__':
    Hard_third_task()